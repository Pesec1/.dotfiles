# приятные дополнения к существующему функционалу pdb,
# чтобы конфиг начал работать требуется переименовать его в .pdbrc
# mv .pdbrc_example .pdbrc

# Print a dictionary, sorted. %1 is the dict, %2 is the prefix for the names.
alias p_ for k in sorted(%1.keys()): print ("%s%-15s= %-80.80s" % ("%2", k, repr(%1[k])))

# Print the instance variables of a thing.
alias pi p_ %1.__dict__ %1.

# Print the instance variables of self.
alias ps pi self

# NOTE: получить локалы
alias pl p_ locals() local:

# NOTE: более удобное хождение по коду
alias nl n;;l
alias sl s;;l

# NOTE: alias для быстрого хождения по трейсбеку
alias uu u;;u
alias uuu u;;u;;u
alias uuuu u;;u;;u;;u
alias uuuuu u;;u;;u;;u;;u
alias dd d;;d
alias ddd d;;d;;d
alias dddd d;;d;;d;;d
alias ddddd d;;d;;d;;d;;d

# NOTE: засечь время выполнения выражения
# (Pdb) timeit 'import time'
# Elapsed: 0.0000622272s
alias tt !import time; t1 = time.time(); exec(%*); print("Elapsed: %.10fs" % (time.time() - t1))

# NOTE: запиклить и анпиклить объект
# dp <path_name> <object>
# dl <path_name> <variable_name>
# (Pdb) df_test
#    a
# 0  0
# 1  1
# 2  2
# (Pdb) dp  df df_test
# (Pdb) dl  df df_test_test
# (Pdb) df_test_test
#    a
# 0  0
# 1  1
# 2  2
alias dp !import pickle; f = open(repr(%1) +'.pkl', 'wb'); pickle.dump(%2, f); f.close()
alias dl !import pickle; f = open(repr(%1) +'.pkl', 'rb'); globals()["%2"] = pickle.load(f); f.close()

# NOTE: alias для пандас и датафреймов
alias vp !import pandas as pd; pd.set_option('display.max_columns', 1000); pd.set_option('display.max_rows', 1000)
alias vpf !import pandas as pd; pd.reset_option("display.max_columns"); pd.reset_option("display.max_rows")
alias df_info !%1.info(); %1.describe()

# NOTE: alias скопировать глобальную переменную в clipboard
alias cl !import pyperclip; pyperclip.copy(str(globals()["%1"]))
